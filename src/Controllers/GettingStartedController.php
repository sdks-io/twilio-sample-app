<?php

declare(strict_types=1);

/*
 * TwilioMessagingSMSLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TwilioMessagingSMSLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use TwilioMessagingSMSLib\Exceptions\ApiException;
use TwilioMessagingSMSLib\Models\Created;
use TwilioMessagingSMSLib\Models\Created1;
use TwilioMessagingSMSLib\Models\OK;
use TwilioMessagingSMSLib\Models\OK1;

class GettingStartedController extends BaseController
{
    /**
     * To send an SMS with Twilio you'll first need to buy a phone number. For that you have to search the
     * catalog of available phone numbers.
     *
     * Once you have the list of available phone numbers, pick one and use it in the next request to buy
     * the number.
     *
     * Learn more about this in the [Twilio Docs](https://www.twilio.com/docs/phone-
     * numbers/api/availablephonenumberlocal-resource).
     *
     * @param bool $smsEnabled Whether the phone numbers can receive text messages. Can be: `true`
     *        or `false`.
     * @param string $countryCode (Required) The
     *        [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the
     *        country from which to read phone numbers.
     *
     * @return OK Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function findAvailablePhoneNumbers(bool $smsEnabled, string $countryCode): OK
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/AvailablePhoneNumbers/{CountryCode}/Local.json')
            ->auth('global')
            ->parameters(
                QueryParam::init('SmsEnabled', $smsEnabled),
                TemplateParam::init('CountryCode', $countryCode)
            );

        $_resHandler = $this->responseHandler()->type(OK::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Purchase a phone-number for your Twilio account. Afterwards you can use this number to send or
     * receive SMS and calls.
     *
     * Read more about it in the [Twilio Docs](https://www.twilio.com/docs/phone-
     * numbers/api/incomingphonenumber-resource#create-an-incomingphonenumber-resource)
     *
     * @param string $phoneNumber The phone number to purchase specified in
     *        [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers
     *        consist of a + followed by the country code and subscriber number without
     *        punctuation characters. For example, +14155551234.
     *
     * @return Created Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function buyAPhoneNumber(string $phoneNumber): Created
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/IncomingPhoneNumbers.json')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('PhoneNumber', $phoneNumber)
            );

        $_resHandler = $this->responseHandler()->type(Created::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Send a message from the account used to make the request with the phone number you purchased from
     * Twilio in the previous step or with any other Twilio phone number you have associated in your
     * account.
     *
     * Read more about it in the [Twilio Docs](https://www.twilio.com/docs/sms/api/message-resource#create-
     * a-message-resource)
     *
     * @param string $body The text of the message you want to send. Can be up to 1,600 characters
     *        in length.
     * @param string $to The destination phone number in
     *        [E.164](https://www.twilio.com/docs/glossary/what-e164) format for SMS/MMS or
     *        [Channel user address](https://www.twilio.com/docs/sms/channels#channel-addresses)
     *        for other 3rd-party channels.
     * @param string $from A Twilio phone number in
     *        [E.164](https://www.twilio.com/docs/glossary/what-e164) format, an [alphanumeric
     *        sender ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphanumeric-sender-
     *        id), or a [Channel Endpoint address](https://www.twilio.
     *        com/docs/sms/channels#channel-addresses) that is enabled for the type of message you
     *        want to send. Phone numbers or [short codes](https://www.twilio.
     *        com/docs/sms/api/short-code) purchased from Twilio also work here. You cannot, for
     *        example, spoof messages from a private cell phone number. If you are using
     *        `messaging_service_sid`, this parameter must be empty.
     *
     * @return Created1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function sendAnSMS(string $body, string $to, string $from): Created1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Messages.json')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('Body', $body),
                FormParam::init('To', $to),
                FormParam::init('From', $from)
            );

        $_resHandler = $this->responseHandler()->type(Created1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retrieve a list of messages belonging to the account used to make the request. You can filter for
     * example for only the messages that were sent from a specific phone number.
     *
     * Read more about it in the [Twilio Docs](https://www.twilio.com/docs/sms/api/message-resource#read-
     * multiple-message-resources)
     *
     * @param string $from Read messages sent from only this phone number or alphanumeric sender ID.
     *
     * @return OK1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAllMessagesSentFromYourTwilioNumber(string $from): OK1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/Messages.json')
            ->auth('global')
            ->parameters(QueryParam::init('From', $from));

        $_resHandler = $this->responseHandler()->type(OK1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
